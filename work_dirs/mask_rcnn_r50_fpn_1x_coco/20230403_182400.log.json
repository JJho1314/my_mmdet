{"env_info": "sys.platform: linux\nPython: 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1: TITAN Xp\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 10.2, V10.2.8\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.2\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75\n  - CuDNN 7.6.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.0\nOpenCV: 4.7.0\nMMCV: 1.7.1\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.2\nMMDetection: 2.27.0+207bda6", "config": "pretrained = '/data/hzf_data/hjj/my_mmdet/RN50.pth'\nmodel = dict(\n    type='MaskRCNN',\n    backbone=dict(type='clip_image'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHeadTEXT',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared4Conv1FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=80,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=True,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=80,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            mask_size=28,\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\ndataset_type = 'CocoDataset'\ndata_root = '/home/work/workspace/CV/data/coco/'\nimg_norm_cfg = dict(\n    mean=[122.7709383, 116.7460125, 104.09373615000001],\n    std=[68.5005327, 66.6321579, 70.32316304999999],\n    to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[122.7709383, 116.7460125, 104.09373615000001],\n        std=[68.5005327, 66.6321579, 70.32316304999999],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[122.7709383, 116.7460125, 104.09373615000001],\n                std=[68.5005327, 66.6321579, 70.32316304999999],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=8,\n    train=dict(\n        type='CocoDataset',\n        ann_file=\n        '/home/work/workspace/CV/data/coco/annotations/instances_train2017.json',\n        img_prefix='/home/work/workspace/CV/data/coco/train2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[122.7709383, 116.7460125, 104.09373615000001],\n                std=[68.5005327, 66.6321579, 70.32316304999999],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file=\n        '/home/work/workspace/CV/data/coco/annotations/instances_val2017.json',\n        img_prefix='/home/work/workspace/CV/data/coco/val2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[122.7709383, 116.7460125, 104.09373615000001],\n                        std=[68.5005327, 66.6321579, 70.32316304999999],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file=\n        '/home/work/workspace/CV/data/coco/annotations/instances_val2017.json',\n        img_prefix='/home/work/workspace/CV/data/coco/val2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[122.7709383, 116.7460125, 104.09373615000001],\n                        std=[68.5005327, 66.6321579, 70.32316304999999],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(metric=['bbox', 'segm'])\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nwork_dir = './work_dirs/mask_rcnn_r50_fpn_1x_coco'\nauto_resume = False\ngpu_ids = range(0, 2)\n", "seed": 0, "exp_name": "mask_rcnn_r50_fpn_1x_coco.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00198, "memory": 8404, "data_time": 0.29482, "loss_rpn_cls": 0.39755, "loss_rpn_bbox": 0.11211, "loss_cls": 1.34903, "acc": 92.10547, "loss_bbox": 0.35561, "loss_iou": 0.01336, "loss_mask": 0.88632, "loss": 3.11398, "time": 2.18184}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00398, "memory": 8404, "data_time": 0.16204, "loss_rpn_cls": 0.2694, "loss_rpn_bbox": 0.10288, "loss_cls": 0.41855, "acc": 94.50537, "loss_bbox": 0.19774, "loss_iou": 0.00068, "loss_mask": 0.68894, "loss": 1.67819, "time": 2.13063}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00597, "memory": 8404, "data_time": 0.16924, "loss_rpn_cls": 0.20141, "loss_rpn_bbox": 0.09678, "loss_cls": 1.58082, "acc": 90.19092, "loss_bbox": 0.40891, "loss_iou": 0.00465, "loss_mask": 0.67851, "loss": 2.97108, "time": 2.1425}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00797, "memory": 8404, "data_time": 0.15207, "loss_rpn_cls": 0.14617, "loss_rpn_bbox": 0.09715, "loss_cls": 0.49702, "acc": 92.62866, "loss_bbox": 0.27946, "loss_iou": 0.00045, "loss_mask": 0.64419, "loss": 1.66444, "time": 2.13391}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00997, "memory": 8404, "data_time": 0.16575, "loss_rpn_cls": 0.12044, "loss_rpn_bbox": 0.09328, "loss_cls": 0.46961, "acc": 92.51514, "loss_bbox": 0.27309, "loss_iou": 0.00014, "loss_mask": 0.60393, "loss": 1.56048, "time": 2.13136}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.01197, "memory": 8404, "data_time": 0.13851, "loss_rpn_cls": 0.11983, "loss_rpn_bbox": 0.08937, "loss_cls": 0.48351, "acc": 91.82349, "loss_bbox": 0.30251, "loss_iou": 0.00017, "loss_mask": 0.57575, "loss": 1.57115, "time": 2.12612}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.01397, "memory": 8404, "data_time": 0.14232, "loss_rpn_cls": 0.1069, "loss_rpn_bbox": 0.09302, "loss_cls": 0.48556, "acc": 91.41357, "loss_bbox": 0.31777, "loss_iou": 0.00029, "loss_mask": 0.56525, "loss": 1.5688, "time": 2.14819}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.01596, "memory": 8640, "data_time": 0.16116, "loss_rpn_cls": 0.10105, "loss_rpn_bbox": 0.08853, "loss_cls": 0.48571, "acc": 90.84961, "loss_bbox": 0.33513, "loss_iou": 0.00064, "loss_mask": 0.53901, "loss": 1.55008, "time": 2.16539}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.01796, "memory": 8640, "data_time": 0.18695, "loss_rpn_cls": 0.10413, "loss_rpn_bbox": 0.09162, "loss_cls": 0.52816, "acc": 90.08643, "loss_bbox": 0.35263, "loss_iou": 0.00178, "loss_mask": 0.53186, "loss": 1.61018, "time": 2.21129}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.01996, "memory": 8640, "data_time": 0.14517, "loss_rpn_cls": 0.10437, "loss_rpn_bbox": 0.0895, "loss_cls": 0.48148, "acc": 90.14185, "loss_bbox": 0.35259, "loss_iou": 0.00183, "loss_mask": 0.51459, "loss": 1.54436, "time": 2.14009}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.02, "memory": 8640, "data_time": 0.14382, "loss_rpn_cls": 0.09461, "loss_rpn_bbox": 0.08452, "loss_cls": 0.45463, "acc": 90.58765, "loss_bbox": 0.34171, "loss_iou": 0.00226, "loss_mask": 0.50398, "loss": 1.48171, "time": 2.14491}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.02, "memory": 8640, "data_time": 0.14423, "loss_rpn_cls": 0.08766, "loss_rpn_bbox": 0.08725, "loss_cls": 0.46374, "acc": 89.8269, "loss_bbox": 0.36005, "loss_iou": 0.00233, "loss_mask": 0.48512, "loss": 1.48615, "time": 2.16734}
