{"env_info": "sys.platform: linux\nPython: 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1: TITAN Xp\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 10.2, V10.2.8\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.2\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75\n  - CuDNN 7.6.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.0\nOpenCV: 4.7.0\nMMCV: 1.7.1\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.2\nMMDetection: 2.27.0+0332681", "config": "model = dict(\n    type='MaskRCNN',\n    backbone=dict(type='Resnet50', name='RN50'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=80,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=80,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            mask_size=28,\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\ndataset_type = 'CocoDataset'\ndata_root = '/home/work/workspace/CV/data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file=\n        '/home/work/workspace/CV/data/coco/annotations/instances_train2017.json',\n        img_prefix='/home/work/workspace/CV/data/coco/train2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file=\n        '/home/work/workspace/CV/data/coco/annotations/instances_val2017.json',\n        img_prefix='/home/work/workspace/CV/data/coco/val2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file=\n        '/home/work/workspace/CV/data/coco/annotations/instances_val2017.json',\n        img_prefix='/home/work/workspace/CV/data/coco/val2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(metric=['bbox', 'segm'])\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nwork_dir = './work_dirs/mask_rcnn_r50_fpn_1x_coco'\nauto_resume = False\ngpu_ids = range(0, 2)\n", "seed": 0, "exp_name": "mask_rcnn_r50_fpn_1x_coco.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00198, "memory": 2031, "data_time": 0.10162, "loss_rpn_cls": 0.43202, "loss_rpn_bbox": 0.13267, "loss_cls": 1.18856, "acc": 90.88965, "loss_bbox": 0.10619, "loss_mask": 1.05878, "loss": 2.91822, "time": 0.40118}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00398, "memory": 2212, "data_time": 0.04058, "loss_rpn_cls": 0.26525, "loss_rpn_bbox": 0.11022, "loss_cls": 0.40084, "acc": 95.34375, "loss_bbox": 0.14214, "loss_mask": 0.71592, "loss": 1.63437, "time": 0.33256}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00597, "memory": 2212, "data_time": 0.03597, "loss_rpn_cls": 0.25803, "loss_rpn_bbox": 0.10736, "loss_cls": 0.41317, "acc": 94.39453, "loss_bbox": 0.19109, "loss_mask": 0.68816, "loss": 1.65781, "time": 0.33656}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00797, "memory": 2216, "data_time": 0.03099, "loss_rpn_cls": 0.23867, "loss_rpn_bbox": 0.10837, "loss_cls": 0.43786, "acc": 94.29883, "loss_bbox": 0.19671, "loss_mask": 0.68017, "loss": 1.66178, "time": 0.34302}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00997, "memory": 2216, "data_time": 0.03145, "loss_rpn_cls": 0.24439, "loss_rpn_bbox": 0.11015, "loss_cls": 0.42986, "acc": 94.31836, "loss_bbox": 0.19155, "loss_mask": 0.6747, "loss": 1.65064, "time": 0.34216}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.01197, "memory": 2216, "data_time": 0.02962, "loss_rpn_cls": 0.24608, "loss_rpn_bbox": 0.11694, "loss_cls": 0.44251, "acc": 94.01465, "loss_bbox": 0.2056, "loss_mask": 0.67097, "loss": 1.68209, "time": 0.34468}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.01397, "memory": 2216, "data_time": 0.02589, "loss_rpn_cls": 0.24241, "loss_rpn_bbox": 0.09955, "loss_cls": 0.38381, "acc": 95.01562, "loss_bbox": 0.16793, "loss_mask": 0.65909, "loss": 1.55279, "time": 0.33642}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.01596, "memory": 2216, "data_time": 0.03272, "loss_rpn_cls": 0.24513, "loss_rpn_bbox": 0.11317, "loss_cls": 0.42346, "acc": 94.22559, "loss_bbox": 0.1982, "loss_mask": 0.65203, "loss": 1.63198, "time": 0.3424}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.01796, "memory": 2216, "data_time": 0.02991, "loss_rpn_cls": 0.27762, "loss_rpn_bbox": 0.13094, "loss_cls": 0.50431, "acc": 94.18555, "loss_bbox": 0.19675, "loss_mask": 0.64093, "loss": 1.75055, "time": 0.34871}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.01996, "memory": 2216, "data_time": 0.02738, "loss_rpn_cls": 0.2374, "loss_rpn_bbox": 0.10698, "loss_cls": 0.42747, "acc": 94.75977, "loss_bbox": 0.17981, "loss_mask": 0.64346, "loss": 1.59512, "time": 0.34461}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.02, "memory": 2216, "data_time": 0.02883, "loss_rpn_cls": 0.27963, "loss_rpn_bbox": 0.12813, "loss_cls": 0.43108, "acc": 94.58496, "loss_bbox": 0.17886, "loss_mask": 0.63583, "loss": 1.65353, "time": 0.34688}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.02, "memory": 2216, "data_time": 0.03056, "loss_rpn_cls": 0.27466, "loss_rpn_bbox": 0.12632, "loss_cls": 0.43192, "acc": 94.62109, "loss_bbox": 0.1826, "loss_mask": 0.63666, "loss": 1.65216, "time": 0.34017}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.02, "memory": 2216, "data_time": 0.03077, "loss_rpn_cls": 0.26364, "loss_rpn_bbox": 0.11621, "loss_cls": 0.51051, "acc": 94.57617, "loss_bbox": 0.19152, "loss_mask": 0.63524, "loss": 1.71712, "time": 0.3447}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.02, "memory": 2216, "data_time": 0.02982, "loss_rpn_cls": 0.26432, "loss_rpn_bbox": 0.11762, "loss_cls": 0.40418, "acc": 94.97852, "loss_bbox": 0.17457, "loss_mask": 0.62912, "loss": 1.58981, "time": 0.34623}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.02, "memory": 2216, "data_time": 0.02702, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 86.44385, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.33902}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.02, "memory": 2216, "data_time": 0.02904, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 25.11461, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.26817}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.02, "memory": 2216, "data_time": 0.02879, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 29.6327, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.27208}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.02, "memory": 2216, "data_time": 0.0287, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 27.14352, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.26903}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.02, "memory": 2216, "data_time": 0.0286, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 28.80623, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.27069}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.02, "memory": 2216, "data_time": 0.03614, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 34.7338, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.27885}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.02, "memory": 2216, "data_time": 0.02846, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 24.48891, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.26911}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.02, "memory": 2216, "data_time": 0.03189, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 23.99462, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.27548}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.02, "memory": 2216, "data_time": 0.02889, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 26.72558, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.27254}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.02, "memory": 2216, "data_time": 0.02625, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 27.17912, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.27606}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.02, "memory": 2216, "data_time": 0.02681, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 30.75213, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.27198}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.02, "memory": 2216, "data_time": 0.02782, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 24.13287, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.27062}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 0.02, "memory": 2216, "data_time": 0.03024, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 25.95988, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.2787}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 0.02, "memory": 2216, "data_time": 0.02624, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 26.73066, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.26949}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 0.02, "memory": 2216, "data_time": 0.02863, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 27.70518, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.27794}
{"mode": "train", "epoch": 1, "iter": 1500, "lr": 0.02, "memory": 2216, "data_time": 0.03018, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 26.27094, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.27707}
{"mode": "train", "epoch": 1, "iter": 1550, "lr": 0.02, "memory": 2216, "data_time": 0.03302, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 25.27018, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.27408}
{"mode": "train", "epoch": 1, "iter": 1600, "lr": 0.02, "memory": 2216, "data_time": 0.02671, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 26.64155, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.27197}
{"mode": "train", "epoch": 1, "iter": 1650, "lr": 0.02, "memory": 2216, "data_time": 0.03542, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 30.32185, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.27446}
{"mode": "train", "epoch": 1, "iter": 1700, "lr": 0.02, "memory": 2216, "data_time": 0.03448, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 27.35652, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.28066}
{"mode": "train", "epoch": 1, "iter": 1750, "lr": 0.02, "memory": 2216, "data_time": 0.02911, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 24.18571, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.27148}
{"mode": "train", "epoch": 1, "iter": 1800, "lr": 0.02, "memory": 2216, "data_time": 0.02964, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 28.06319, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.27005}
{"mode": "train", "epoch": 1, "iter": 1850, "lr": 0.02, "memory": 2216, "data_time": 0.02773, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 28.16456, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.26934}
{"mode": "train", "epoch": 1, "iter": 1900, "lr": 0.02, "memory": 2216, "data_time": 0.03153, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 33.45563, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.27951}
{"mode": "train", "epoch": 1, "iter": 1950, "lr": 0.02, "memory": 2216, "data_time": 0.02795, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 24.90212, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.27262}
{"mode": "train", "epoch": 1, "iter": 2000, "lr": 0.02, "memory": 2216, "data_time": 0.0288, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 25.72293, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.27606}
{"mode": "train", "epoch": 1, "iter": 2050, "lr": 0.02, "memory": 2216, "data_time": 0.03016, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 29.33952, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.27583}
{"mode": "train", "epoch": 1, "iter": 2100, "lr": 0.02, "memory": 2216, "data_time": 0.02903, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 31.35069, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.27345}
{"mode": "train", "epoch": 1, "iter": 2150, "lr": 0.02, "memory": 2216, "data_time": 0.03171, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 27.9967, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.27497}
{"mode": "train", "epoch": 1, "iter": 2200, "lr": 0.02, "memory": 2216, "data_time": 0.02515, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 30.03015, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.27426}
{"mode": "train", "epoch": 1, "iter": 2250, "lr": 0.02, "memory": 2216, "data_time": 0.03089, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 24.26992, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.27674}
{"mode": "train", "epoch": 1, "iter": 2300, "lr": 0.02, "memory": 2216, "data_time": 0.02863, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 26.05038, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.27933}
{"mode": "train", "epoch": 1, "iter": 2350, "lr": 0.02, "memory": 2216, "data_time": 0.02983, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 30.04723, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.27228}
{"mode": "train", "epoch": 1, "iter": 2400, "lr": 0.02, "memory": 2216, "data_time": 0.03224, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 28.24354, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.27609}
{"mode": "train", "epoch": 1, "iter": 2450, "lr": 0.02, "memory": 2216, "data_time": 0.03241, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 26.99504, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.28079}
{"mode": "train", "epoch": 1, "iter": 2500, "lr": 0.02, "memory": 2216, "data_time": 0.03415, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 28.8693, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.28106}
{"mode": "train", "epoch": 1, "iter": 2550, "lr": 0.02, "memory": 2216, "data_time": 0.03535, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 26.38281, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.28141}
{"mode": "train", "epoch": 1, "iter": 2600, "lr": 0.02, "memory": 2216, "data_time": 0.0281, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 25.27719, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.27461}
{"mode": "train", "epoch": 1, "iter": 2650, "lr": 0.02, "memory": 2216, "data_time": 0.02985, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 28.46913, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.28121}
{"mode": "train", "epoch": 1, "iter": 2700, "lr": 0.02, "memory": 2216, "data_time": 0.02793, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 27.47615, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.28064}
{"mode": "train", "epoch": 1, "iter": 2750, "lr": 0.02, "memory": 2216, "data_time": 0.0266, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 24.0719, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.2767}
{"mode": "train", "epoch": 1, "iter": 2800, "lr": 0.02, "memory": 2216, "data_time": 0.03311, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 27.82894, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.27377}
{"mode": "train", "epoch": 1, "iter": 2850, "lr": 0.02, "memory": 2216, "data_time": 0.02733, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 23.01135, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.27205}
{"mode": "train", "epoch": 1, "iter": 2900, "lr": 0.02, "memory": 2216, "data_time": 0.03554, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 30.04265, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.28103}
{"mode": "train", "epoch": 1, "iter": 2950, "lr": 0.02, "memory": 2216, "data_time": 0.02841, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 24.47533, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.27462}
{"mode": "train", "epoch": 1, "iter": 3000, "lr": 0.02, "memory": 2216, "data_time": 0.02898, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 27.42425, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.26835}
{"mode": "train", "epoch": 1, "iter": 3050, "lr": 0.02, "memory": 2216, "data_time": 0.03102, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 27.85066, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.27976}
{"mode": "train", "epoch": 1, "iter": 3100, "lr": 0.02, "memory": 2216, "data_time": 0.03205, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 26.70834, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.28145}
{"mode": "train", "epoch": 1, "iter": 3150, "lr": 0.02, "memory": 2216, "data_time": 0.02989, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 28.4266, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.27578}
{"mode": "train", "epoch": 1, "iter": 3200, "lr": 0.02, "memory": 2216, "data_time": 0.02712, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 24.90025, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.27764}
{"mode": "train", "epoch": 1, "iter": 3250, "lr": 0.02, "memory": 2216, "data_time": 0.03193, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 27.62352, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.28589}
{"mode": "train", "epoch": 1, "iter": 3300, "lr": 0.02, "memory": 2216, "data_time": 0.03158, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 28.0263, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.27907}
{"mode": "train", "epoch": 1, "iter": 3350, "lr": 0.02, "memory": 2216, "data_time": 0.03475, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 27.87393, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.29541}
{"mode": "train", "epoch": 1, "iter": 3400, "lr": 0.02, "memory": 2216, "data_time": 0.02758, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 27.01733, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.28615}
{"mode": "train", "epoch": 1, "iter": 3450, "lr": 0.02, "memory": 2216, "data_time": 0.02802, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 30.01455, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.28161}
{"mode": "train", "epoch": 1, "iter": 3500, "lr": 0.02, "memory": 2216, "data_time": 0.03127, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 29.17023, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.28665}
{"mode": "train", "epoch": 1, "iter": 3550, "lr": 0.02, "memory": 2216, "data_time": 0.03229, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 27.5064, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.28279}
{"mode": "train", "epoch": 1, "iter": 3600, "lr": 0.02, "memory": 2216, "data_time": 0.02498, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 30.70634, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.27933}
{"mode": "train", "epoch": 1, "iter": 3650, "lr": 0.02, "memory": 2216, "data_time": 0.0279, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 29.45965, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.27602}
{"mode": "train", "epoch": 1, "iter": 3700, "lr": 0.02, "memory": 2216, "data_time": 0.03302, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 28.3555, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.28332}
{"mode": "train", "epoch": 1, "iter": 3750, "lr": 0.02, "memory": 2216, "data_time": 0.03183, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 28.02991, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.28104}
{"mode": "train", "epoch": 1, "iter": 3800, "lr": 0.02, "memory": 2216, "data_time": 0.02958, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 27.66045, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.28136}
{"mode": "train", "epoch": 1, "iter": 3850, "lr": 0.02, "memory": 2216, "data_time": 0.03474, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 30.8767, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.28778}
{"mode": "train", "epoch": 1, "iter": 3900, "lr": 0.02, "memory": 2216, "data_time": 0.0262, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 31.2969, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.29027}
{"mode": "train", "epoch": 1, "iter": 3950, "lr": 0.02, "memory": 2216, "data_time": 0.03007, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 26.82687, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.28796}
{"mode": "train", "epoch": 1, "iter": 4000, "lr": 0.02, "memory": 2216, "data_time": 0.03036, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 29.67056, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.28496}
{"mode": "train", "epoch": 1, "iter": 4050, "lr": 0.02, "memory": 2216, "data_time": 0.03408, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 28.93074, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.28335}
{"mode": "train", "epoch": 1, "iter": 4100, "lr": 0.02, "memory": 2216, "data_time": 0.03095, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 30.31007, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.28753}
{"mode": "train", "epoch": 1, "iter": 4150, "lr": 0.02, "memory": 2216, "data_time": 0.03564, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 27.38474, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.28911}
{"mode": "train", "epoch": 1, "iter": 4200, "lr": 0.02, "memory": 2216, "data_time": 0.02614, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 26.79027, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.28374}
{"mode": "train", "epoch": 1, "iter": 4250, "lr": 0.02, "memory": 2216, "data_time": 0.02387, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 25.6395, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.28209}
{"mode": "train", "epoch": 1, "iter": 4300, "lr": 0.02, "memory": 2216, "data_time": 0.03062, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 23.71154, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.28889}
{"mode": "train", "epoch": 1, "iter": 4350, "lr": 0.02, "memory": 2216, "data_time": 0.02917, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 28.62791, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.28932}
{"mode": "train", "epoch": 1, "iter": 4400, "lr": 0.02, "memory": 2216, "data_time": 0.03432, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 24.6915, "loss_bbox": NaN, "loss_mask": NaN, "loss": NaN, "time": 0.29549}
