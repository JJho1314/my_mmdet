{"env_info": "sys.platform: linux\nPython: 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1: TITAN Xp\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 10.2, V10.2.8\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.2\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75\n  - CuDNN 7.6.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.0\nOpenCV: 4.7.0\nMMCV: 1.7.1\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.2\nMMDetection: 2.27.0+47a1b4a", "config": "model = dict(\n    type='MaskRCNN',\n    backbone=dict(type='Resnet50', name='RN50'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=80,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=80,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            mask_size=28,\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\ndataset_type = 'CocoDataset'\ndata_root = '/home/work/workspace/CV/data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n    dict(type='Resize', img_scale=(1024, 1024), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=8,\n    train=dict(\n        type='CocoDataset',\n        ann_file=\n        '/home/work/workspace/CV/data/coco/annotations/instances_train2017.json',\n        img_prefix='/home/work/workspace/CV/data/coco/train2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n            dict(type='Resize', img_scale=(1024, 1024), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file=\n        '/home/work/workspace/CV/data/coco/annotations/instances_val2017.json',\n        img_prefix='/home/work/workspace/CV/data/coco/val2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file=\n        '/home/work/workspace/CV/data/coco/annotations/instances_val2017.json',\n        img_prefix='/home/work/workspace/CV/data/coco/test2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(metric=['bbox', 'segm'])\noptimizer = dict(type='SGD', lr=0.0001, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nwork_dir = './work_dirs/mask_rcnn_r50_fpn_1x_coco'\nauto_resume = False\ngpu_ids = range(0, 2)\n", "seed": 0, "exp_name": "mask_rcnn_r50_fpn_1x_coco.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 1e-05, "memory": 3522, "data_time": 0.14766, "loss_rpn_cls": 0.66675, "loss_rpn_bbox": 0.15347, "loss_cls": 2.32045, "acc": 65.41895, "loss_bbox": 0.00986, "loss_mask": 1.69261, "loss": 4.84314, "time": 0.60593}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 2e-05, "memory": 3522, "data_time": 0.06533, "loss_rpn_cls": 0.61117, "loss_rpn_bbox": 0.14047, "loss_cls": 0.20754, "acc": 98.34766, "loss_bbox": 0.01222, "loss_mask": 1.40496, "loss": 2.37636, "time": 0.51709}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 3e-05, "memory": 3522, "data_time": 0.06538, "loss_rpn_cls": 0.53569, "loss_rpn_bbox": 0.13587, "loss_cls": 0.41779, "acc": 97.18164, "loss_bbox": 0.06408, "loss_mask": 1.17099, "loss": 2.32442, "time": 0.54343}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 4e-05, "memory": 3523, "data_time": 0.05615, "loss_rpn_cls": 0.45104, "loss_rpn_bbox": 0.11899, "loss_cls": 0.43333, "acc": 96.18848, "loss_bbox": 0.11258, "loss_mask": 0.95827, "loss": 2.07421, "time": 0.55344}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 5e-05, "memory": 3523, "data_time": 0.06805, "loss_rpn_cls": 0.39338, "loss_rpn_bbox": 0.11738, "loss_cls": 0.44958, "acc": 95.69629, "loss_bbox": 0.13269, "loss_mask": 0.89987, "loss": 1.99289, "time": 0.58588}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 6e-05, "memory": 3523, "data_time": 0.06081, "loss_rpn_cls": 0.34133, "loss_rpn_bbox": 0.10636, "loss_cls": 0.42867, "acc": 95.66357, "loss_bbox": 0.13865, "loss_mask": 0.85392, "loss": 1.86893, "time": 0.58578}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 7e-05, "memory": 3523, "data_time": 0.06336, "loss_rpn_cls": 0.34182, "loss_rpn_bbox": 0.12079, "loss_cls": 0.43258, "acc": 95.26123, "loss_bbox": 0.15028, "loss_mask": 0.83446, "loss": 1.87993, "time": 0.60219}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 8e-05, "memory": 3523, "data_time": 0.06285, "loss_rpn_cls": 0.33215, "loss_rpn_bbox": 0.11468, "loss_cls": 0.41885, "acc": 95.35889, "loss_bbox": 0.14576, "loss_mask": 0.81893, "loss": 1.83037, "time": 0.59396}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 9e-05, "memory": 3523, "data_time": 0.05991, "loss_rpn_cls": 0.30443, "loss_rpn_bbox": 0.109, "loss_cls": 0.38037, "acc": 95.43994, "loss_bbox": 0.14507, "loss_mask": 0.78813, "loss": 1.727, "time": 0.6056}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.0001, "memory": 3523, "data_time": 0.06655, "loss_rpn_cls": 0.29596, "loss_rpn_bbox": 0.10877, "loss_cls": 0.4047, "acc": 95.12061, "loss_bbox": 0.15732, "loss_mask": 0.77342, "loss": 1.74017, "time": 0.6137}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.0001, "memory": 3523, "data_time": 0.07329, "loss_rpn_cls": 0.30686, "loss_rpn_bbox": 0.1122, "loss_cls": 0.43076, "acc": 94.54639, "loss_bbox": 0.17815, "loss_mask": 0.76548, "loss": 1.79345, "time": 0.61956}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.0001, "memory": 3523, "data_time": 0.06732, "loss_rpn_cls": 0.30086, "loss_rpn_bbox": 0.11066, "loss_cls": 0.41202, "acc": 94.74512, "loss_bbox": 0.17165, "loss_mask": 0.763, "loss": 1.75819, "time": 0.61116}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.0001, "memory": 3523, "data_time": 0.07598, "loss_rpn_cls": 0.31516, "loss_rpn_bbox": 0.11862, "loss_cls": 0.44733, "acc": 94.14258, "loss_bbox": 0.19166, "loss_mask": 0.75856, "loss": 1.83134, "time": 0.62886}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.0001, "memory": 3523, "data_time": 0.07019, "loss_rpn_cls": 0.28392, "loss_rpn_bbox": 0.10634, "loss_cls": 0.41527, "acc": 94.40674, "loss_bbox": 0.18403, "loss_mask": 0.74854, "loss": 1.7381, "time": 0.61296}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.0001, "memory": 3523, "data_time": 0.06262, "loss_rpn_cls": 0.27423, "loss_rpn_bbox": 0.10585, "loss_cls": 0.39954, "acc": 94.53516, "loss_bbox": 0.18062, "loss_mask": 0.73771, "loss": 1.69796, "time": 0.60893}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.0001, "memory": 3523, "data_time": 0.06549, "loss_rpn_cls": 0.26754, "loss_rpn_bbox": 0.1139, "loss_cls": 0.40679, "acc": 94.52539, "loss_bbox": 0.18392, "loss_mask": 0.74219, "loss": 1.71435, "time": 0.6069}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.0001, "memory": 3523, "data_time": 0.06325, "loss_rpn_cls": 0.26748, "loss_rpn_bbox": 0.10824, "loss_cls": 0.40534, "acc": 94.48779, "loss_bbox": 0.18373, "loss_mask": 0.73073, "loss": 1.69554, "time": 0.60375}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.0001, "memory": 3523, "data_time": 0.07042, "loss_rpn_cls": 0.27743, "loss_rpn_bbox": 0.10959, "loss_cls": 0.41307, "acc": 94.16943, "loss_bbox": 0.19383, "loss_mask": 0.7297, "loss": 1.72363, "time": 0.60929}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.0001, "memory": 3523, "data_time": 0.05291, "loss_rpn_cls": 0.27892, "loss_rpn_bbox": 0.10686, "loss_cls": 0.40369, "acc": 94.41797, "loss_bbox": 0.18201, "loss_mask": 0.72407, "loss": 1.69556, "time": 0.6055}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.0001, "memory": 3523, "data_time": 0.06454, "loss_rpn_cls": 0.26088, "loss_rpn_bbox": 0.1017, "loss_cls": 0.3985, "acc": 94.47266, "loss_bbox": 0.18633, "loss_mask": 0.72586, "loss": 1.67326, "time": 0.6064}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.0001, "memory": 3523, "data_time": 0.07914, "loss_rpn_cls": 0.26884, "loss_rpn_bbox": 0.11391, "loss_cls": 0.41889, "acc": 94.125, "loss_bbox": 0.19666, "loss_mask": 0.72164, "loss": 1.71994, "time": 0.61584}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.0001, "memory": 3523, "data_time": 0.05885, "loss_rpn_cls": 0.26325, "loss_rpn_bbox": 0.105, "loss_cls": 0.4171, "acc": 94.03076, "loss_bbox": 0.20125, "loss_mask": 0.72126, "loss": 1.70787, "time": 0.59917}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.0001, "memory": 3523, "data_time": 0.06058, "loss_rpn_cls": 0.27216, "loss_rpn_bbox": 0.10132, "loss_cls": 0.40081, "acc": 94.54492, "loss_bbox": 0.17967, "loss_mask": 0.7183, "loss": 1.67226, "time": 0.60167}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.0001, "memory": 3523, "data_time": 0.06291, "loss_rpn_cls": 0.25975, "loss_rpn_bbox": 0.10422, "loss_cls": 0.41746, "acc": 94.14648, "loss_bbox": 0.19966, "loss_mask": 0.71888, "loss": 1.69997, "time": 0.60162}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.0001, "memory": 3523, "data_time": 0.06223, "loss_rpn_cls": 0.25733, "loss_rpn_bbox": 0.1054, "loss_cls": 0.41855, "acc": 94.20361, "loss_bbox": 0.19466, "loss_mask": 0.71725, "loss": 1.69319, "time": 0.61022}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.0001, "memory": 3523, "data_time": 0.0561, "loss_rpn_cls": 0.24422, "loss_rpn_bbox": 0.0969, "loss_cls": 0.38393, "acc": 94.6167, "loss_bbox": 0.18213, "loss_mask": 0.71411, "loss": 1.62128, "time": 0.58767}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 0.0001, "memory": 3523, "data_time": 0.06333, "loss_rpn_cls": 0.24768, "loss_rpn_bbox": 0.10782, "loss_cls": 0.41245, "acc": 94.04248, "loss_bbox": 0.2017, "loss_mask": 0.71129, "loss": 1.68094, "time": 0.60484}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 0.0001, "memory": 3523, "data_time": 0.06547, "loss_rpn_cls": 0.26288, "loss_rpn_bbox": 0.10475, "loss_cls": 0.40275, "acc": 94.30225, "loss_bbox": 0.18925, "loss_mask": 0.71136, "loss": 1.671, "time": 0.59969}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 0.0001, "memory": 3523, "data_time": 0.05882, "loss_rpn_cls": 0.25313, "loss_rpn_bbox": 0.09958, "loss_cls": 0.39109, "acc": 94.55713, "loss_bbox": 0.18111, "loss_mask": 0.71256, "loss": 1.63747, "time": 0.59998}
{"mode": "train", "epoch": 1, "iter": 1500, "lr": 0.0001, "memory": 3523, "data_time": 0.06092, "loss_rpn_cls": 0.2433, "loss_rpn_bbox": 0.10139, "loss_cls": 0.39717, "acc": 94.46289, "loss_bbox": 0.18742, "loss_mask": 0.70914, "loss": 1.63841, "time": 0.59161}
{"mode": "train", "epoch": 1, "iter": 1550, "lr": 0.0001, "memory": 3523, "data_time": 0.06855, "loss_rpn_cls": 0.25619, "loss_rpn_bbox": 0.10345, "loss_cls": 0.4178, "acc": 94.15479, "loss_bbox": 0.1956, "loss_mask": 0.70792, "loss": 1.68095, "time": 0.60609}
{"mode": "train", "epoch": 1, "iter": 1600, "lr": 0.0001, "memory": 3523, "data_time": 0.06943, "loss_rpn_cls": 0.27201, "loss_rpn_bbox": 0.11009, "loss_cls": 0.41732, "acc": 94.04639, "loss_bbox": 0.19426, "loss_mask": 0.70583, "loss": 1.69951, "time": 0.60348}
{"mode": "train", "epoch": 1, "iter": 1650, "lr": 0.0001, "memory": 3523, "data_time": 0.07324, "loss_rpn_cls": 0.25085, "loss_rpn_bbox": 0.0988, "loss_cls": 0.38191, "acc": 94.58887, "loss_bbox": 0.17839, "loss_mask": 0.70295, "loss": 1.6129, "time": 0.60188}
{"mode": "train", "epoch": 1, "iter": 1700, "lr": 0.0001, "memory": 3523, "data_time": 0.0577, "loss_rpn_cls": 0.25434, "loss_rpn_bbox": 0.10496, "loss_cls": 0.40061, "acc": 94.39502, "loss_bbox": 0.18882, "loss_mask": 0.70955, "loss": 1.65828, "time": 0.6102}
{"mode": "train", "epoch": 1, "iter": 1750, "lr": 0.0001, "memory": 3523, "data_time": 0.05685, "loss_rpn_cls": 0.23461, "loss_rpn_bbox": 0.09628, "loss_cls": 0.3971, "acc": 94.37988, "loss_bbox": 0.18997, "loss_mask": 0.7022, "loss": 1.62016, "time": 0.60262}
{"mode": "train", "epoch": 1, "iter": 1800, "lr": 0.0001, "memory": 3523, "data_time": 0.06165, "loss_rpn_cls": 0.24118, "loss_rpn_bbox": 0.09897, "loss_cls": 0.40431, "acc": 94.17871, "loss_bbox": 0.19642, "loss_mask": 0.70102, "loss": 1.64189, "time": 0.61025}
{"mode": "train", "epoch": 1, "iter": 1850, "lr": 0.0001, "memory": 3523, "data_time": 0.06202, "loss_rpn_cls": 0.25447, "loss_rpn_bbox": 0.1049, "loss_cls": 0.41046, "acc": 94.09326, "loss_bbox": 0.19788, "loss_mask": 0.70053, "loss": 1.66824, "time": 0.60652}
{"mode": "train", "epoch": 1, "iter": 1900, "lr": 0.0001, "memory": 3523, "data_time": 0.06433, "loss_rpn_cls": 0.24483, "loss_rpn_bbox": 0.09741, "loss_cls": 0.38946, "acc": 94.56592, "loss_bbox": 0.18351, "loss_mask": 0.70251, "loss": 1.61772, "time": 0.60234}
{"mode": "train", "epoch": 1, "iter": 1950, "lr": 0.0001, "memory": 3523, "data_time": 0.05943, "loss_rpn_cls": 0.24093, "loss_rpn_bbox": 0.09573, "loss_cls": 0.41852, "acc": 94.10059, "loss_bbox": 0.19971, "loss_mask": 0.6996, "loss": 1.65449, "time": 0.59672}
{"mode": "train", "epoch": 1, "iter": 2000, "lr": 0.0001, "memory": 3523, "data_time": 0.0512, "loss_rpn_cls": 0.22539, "loss_rpn_bbox": 0.08887, "loss_cls": 0.38293, "acc": 94.60303, "loss_bbox": 0.18585, "loss_mask": 0.70059, "loss": 1.58363, "time": 0.59905}
{"mode": "train", "epoch": 1, "iter": 2050, "lr": 0.0001, "memory": 3523, "data_time": 0.06015, "loss_rpn_cls": 0.24093, "loss_rpn_bbox": 0.09737, "loss_cls": 0.38597, "acc": 94.52197, "loss_bbox": 0.18263, "loss_mask": 0.70237, "loss": 1.60928, "time": 0.60456}
{"mode": "train", "epoch": 1, "iter": 2100, "lr": 0.0001, "memory": 3523, "data_time": 0.06132, "loss_rpn_cls": 0.23184, "loss_rpn_bbox": 0.09125, "loss_cls": 0.39219, "acc": 94.42383, "loss_bbox": 0.1911, "loss_mask": 0.70089, "loss": 1.60728, "time": 0.60331}
{"mode": "train", "epoch": 1, "iter": 2150, "lr": 0.0001, "memory": 3523, "data_time": 0.05925, "loss_rpn_cls": 0.24068, "loss_rpn_bbox": 0.09445, "loss_cls": 0.41666, "acc": 94.03662, "loss_bbox": 0.205, "loss_mask": 0.69894, "loss": 1.65574, "time": 0.59597}
{"mode": "train", "epoch": 1, "iter": 2200, "lr": 0.0001, "memory": 3523, "data_time": 0.05766, "loss_rpn_cls": 0.23371, "loss_rpn_bbox": 0.09635, "loss_cls": 0.40351, "acc": 94.32275, "loss_bbox": 0.1941, "loss_mask": 0.69848, "loss": 1.62614, "time": 0.5982}
{"mode": "train", "epoch": 1, "iter": 2250, "lr": 0.0001, "memory": 3523, "data_time": 0.06499, "loss_rpn_cls": 0.24939, "loss_rpn_bbox": 0.10506, "loss_cls": 0.40281, "acc": 94.25, "loss_bbox": 0.19252, "loss_mask": 0.69675, "loss": 1.64653, "time": 0.622}
{"mode": "train", "epoch": 1, "iter": 2300, "lr": 0.0001, "memory": 3523, "data_time": 0.06053, "loss_rpn_cls": 0.24289, "loss_rpn_bbox": 0.10375, "loss_cls": 0.39152, "acc": 94.50195, "loss_bbox": 0.18487, "loss_mask": 0.69486, "loss": 1.61788, "time": 0.60925}
{"mode": "train", "epoch": 1, "iter": 2350, "lr": 0.0001, "memory": 3523, "data_time": 0.05702, "loss_rpn_cls": 0.25017, "loss_rpn_bbox": 0.10538, "loss_cls": 0.40328, "acc": 94.24365, "loss_bbox": 0.19375, "loss_mask": 0.69687, "loss": 1.64945, "time": 0.60679}
{"mode": "train", "epoch": 1, "iter": 2400, "lr": 0.0001, "memory": 3523, "data_time": 0.06166, "loss_rpn_cls": 0.23912, "loss_rpn_bbox": 0.0928, "loss_cls": 0.40566, "acc": 94.10889, "loss_bbox": 0.19938, "loss_mask": 0.69252, "loss": 1.62948, "time": 0.60944}
{"mode": "train", "epoch": 1, "iter": 2450, "lr": 0.0001, "memory": 3523, "data_time": 0.06504, "loss_rpn_cls": 0.22411, "loss_rpn_bbox": 0.09109, "loss_cls": 0.41194, "acc": 94.25732, "loss_bbox": 0.19873, "loss_mask": 0.69577, "loss": 1.62164, "time": 0.60955}
{"mode": "train", "epoch": 1, "iter": 2500, "lr": 0.0001, "memory": 3523, "data_time": 0.06473, "loss_rpn_cls": 0.23748, "loss_rpn_bbox": 0.09374, "loss_cls": 0.39061, "acc": 94.49072, "loss_bbox": 0.18577, "loss_mask": 0.69552, "loss": 1.60311, "time": 0.60364}
{"mode": "train", "epoch": 1, "iter": 2550, "lr": 0.0001, "memory": 3523, "data_time": 0.06448, "loss_rpn_cls": 0.24138, "loss_rpn_bbox": 0.09732, "loss_cls": 0.39578, "acc": 94.32764, "loss_bbox": 0.19233, "loss_mask": 0.69024, "loss": 1.61705, "time": 0.59996}
{"mode": "train", "epoch": 1, "iter": 2600, "lr": 0.0001, "memory": 3523, "data_time": 0.06396, "loss_rpn_cls": 0.24907, "loss_rpn_bbox": 0.09176, "loss_cls": 0.38657, "acc": 94.39307, "loss_bbox": 0.18821, "loss_mask": 0.68771, "loss": 1.60331, "time": 0.60879}
{"mode": "train", "epoch": 1, "iter": 2650, "lr": 0.0001, "memory": 3523, "data_time": 0.06908, "loss_rpn_cls": 0.26084, "loss_rpn_bbox": 0.10896, "loss_cls": 0.38739, "acc": 94.354, "loss_bbox": 0.18878, "loss_mask": 0.68992, "loss": 1.63589, "time": 0.62435}
{"mode": "train", "epoch": 1, "iter": 2700, "lr": 0.0001, "memory": 3523, "data_time": 0.06317, "loss_rpn_cls": 0.2495, "loss_rpn_bbox": 0.09682, "loss_cls": 0.38035, "acc": 94.48682, "loss_bbox": 0.18276, "loss_mask": 0.68835, "loss": 1.59779, "time": 0.59488}
{"mode": "train", "epoch": 1, "iter": 2750, "lr": 0.0001, "memory": 3523, "data_time": 0.06111, "loss_rpn_cls": 0.2487, "loss_rpn_bbox": 0.10096, "loss_cls": 0.42365, "acc": 93.82471, "loss_bbox": 0.20717, "loss_mask": 0.69098, "loss": 1.67145, "time": 0.60711}
{"mode": "train", "epoch": 1, "iter": 2800, "lr": 0.0001, "memory": 3523, "data_time": 0.06509, "loss_rpn_cls": 0.24527, "loss_rpn_bbox": 0.09485, "loss_cls": 0.3848, "acc": 94.47998, "loss_bbox": 0.18397, "loss_mask": 0.6883, "loss": 1.59717, "time": 0.60543}
{"mode": "train", "epoch": 1, "iter": 2850, "lr": 0.0001, "memory": 3523, "data_time": 0.0604, "loss_rpn_cls": 0.22693, "loss_rpn_bbox": 0.08832, "loss_cls": 0.39989, "acc": 94.21973, "loss_bbox": 0.19945, "loss_mask": 0.68972, "loss": 1.60431, "time": 0.60019}
{"mode": "train", "epoch": 1, "iter": 2900, "lr": 0.0001, "memory": 3523, "data_time": 0.06757, "loss_rpn_cls": 0.23956, "loss_rpn_bbox": 0.09599, "loss_cls": 0.38356, "acc": 94.48047, "loss_bbox": 0.18346, "loss_mask": 0.68413, "loss": 1.58671, "time": 0.60054}
{"mode": "train", "epoch": 1, "iter": 2950, "lr": 0.0001, "memory": 3523, "data_time": 0.06411, "loss_rpn_cls": 0.25055, "loss_rpn_bbox": 0.10088, "loss_cls": 0.39925, "acc": 94.21289, "loss_bbox": 0.19171, "loss_mask": 0.68893, "loss": 1.63132, "time": 0.61763}
{"mode": "train", "epoch": 1, "iter": 3000, "lr": 0.0001, "memory": 3523, "data_time": 0.06295, "loss_rpn_cls": 0.24131, "loss_rpn_bbox": 0.10118, "loss_cls": 0.41676, "acc": 93.95557, "loss_bbox": 0.20474, "loss_mask": 0.68881, "loss": 1.65279, "time": 0.61596}
{"mode": "train", "epoch": 1, "iter": 3050, "lr": 0.0001, "memory": 3523, "data_time": 0.06325, "loss_rpn_cls": 0.23039, "loss_rpn_bbox": 0.09048, "loss_cls": 0.38885, "acc": 94.36182, "loss_bbox": 0.19332, "loss_mask": 0.68835, "loss": 1.59139, "time": 0.60393}
{"mode": "train", "epoch": 1, "iter": 3100, "lr": 0.0001, "memory": 3523, "data_time": 0.06792, "loss_rpn_cls": 0.24874, "loss_rpn_bbox": 0.10405, "loss_cls": 0.41079, "acc": 94.00635, "loss_bbox": 0.2024, "loss_mask": 0.68803, "loss": 1.65402, "time": 0.60823}
{"mode": "train", "epoch": 1, "iter": 3150, "lr": 0.0001, "memory": 3523, "data_time": 0.06488, "loss_rpn_cls": 0.24881, "loss_rpn_bbox": 0.10948, "loss_cls": 0.41162, "acc": 93.99463, "loss_bbox": 0.20371, "loss_mask": 0.68769, "loss": 1.66131, "time": 0.61273}
{"mode": "train", "epoch": 1, "iter": 3200, "lr": 0.0001, "memory": 3523, "data_time": 0.06406, "loss_rpn_cls": 0.23451, "loss_rpn_bbox": 0.09164, "loss_cls": 0.39347, "acc": 94.35352, "loss_bbox": 0.19105, "loss_mask": 0.68802, "loss": 1.59869, "time": 0.60025}
{"mode": "train", "epoch": 1, "iter": 3250, "lr": 0.0001, "memory": 3523, "data_time": 0.07391, "loss_rpn_cls": 0.23914, "loss_rpn_bbox": 0.09726, "loss_cls": 0.41599, "acc": 93.89648, "loss_bbox": 0.20952, "loss_mask": 0.68409, "loss": 1.64599, "time": 0.64208}
{"mode": "train", "epoch": 1, "iter": 3300, "lr": 0.0001, "memory": 3523, "data_time": 0.05803, "loss_rpn_cls": 0.23669, "loss_rpn_bbox": 0.09526, "loss_cls": 0.39793, "acc": 94.23047, "loss_bbox": 0.19608, "loss_mask": 0.6855, "loss": 1.61145, "time": 0.6187}
{"mode": "train", "epoch": 1, "iter": 3350, "lr": 0.0001, "memory": 3523, "data_time": 0.06019, "loss_rpn_cls": 0.24231, "loss_rpn_bbox": 0.09868, "loss_cls": 0.40408, "acc": 94.07324, "loss_bbox": 0.2008, "loss_mask": 0.68428, "loss": 1.63016, "time": 0.62128}
{"mode": "train", "epoch": 1, "iter": 3400, "lr": 0.0001, "memory": 3523, "data_time": 0.05861, "loss_rpn_cls": 0.23724, "loss_rpn_bbox": 0.09744, "loss_cls": 0.405, "acc": 94.13379, "loss_bbox": 0.19931, "loss_mask": 0.68597, "loss": 1.62496, "time": 0.61214}
{"mode": "train", "epoch": 1, "iter": 3450, "lr": 0.0001, "memory": 3523, "data_time": 0.06207, "loss_rpn_cls": 0.22181, "loss_rpn_bbox": 0.08869, "loss_cls": 0.39139, "acc": 94.37988, "loss_bbox": 0.19361, "loss_mask": 0.68649, "loss": 1.58199, "time": 0.62223}
